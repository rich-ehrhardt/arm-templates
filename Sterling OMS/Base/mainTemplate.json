{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "namePrefix": {
            "type": "string",
            "minLength": 3,
            "maxLength": 10,
            "metadata": {
                "description": "Prefix for resource names"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Azure location for resources"
            }
        },
        "vnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.0.0/20",
            "metadata": {
                "description": "CIDR for Virtual Network"
            }
        },
        "controlSubnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "CIDR for the control subnet"
            }
        },
        "workerSubnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.1.0/24",
            "metadata": {
                "description": "CIDR for the worker subnet"
            }
        },
        "endpointSubnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.2.0/24",
            "metadata": {
                "description": "CIDR for the endpoint subnet"
            }
        },
        "dataSubnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.3.0/24",
            "metadata": {
                "description": "CIDR for the data subnet"
            }
        },
        "devSubnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.4.0/24",
            "metadata": {
                "description": "CIDR for the development subnet"
            }
        },
        "natSubnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.5.0/24",
            "metadata": {
                "description": "CIDR for the outbound subnet"
            }
        },
        "bastionSubnetCIDR": {
            "type": "string",
            "defaultValue": "10.0.6.0/24",
            "metadata": {
                "description": "CIDR for the bastion subnet"
            }
        },
        "adminUserName": {
            "type": "string",
            "defaultValue": "azureuser",
            "metadata": {
                "description": "Admin user for created VMs"
            }
        },
        "adminPassword": {
            "type": "secureString",
            "metadata": {
                "description": "Default admin password for VMs"
            }
        },
        "backupRetentionDays": {
            "type": "int",
            "defaultValue": 7,
            "metadata": {
                "description": "Number of days to retain backups"
            }
        },
        "geoRedundantBackup": {
            "type": "string",
            "defaultValue": "disabled",
            "metadata": {
                "description": "Use geo redundant backups or not for PostgreSQL service"
            }
        },
        "dbStorageSizeGB": {
            "type": "int",
            "defaultValue": 2048,
            "metadata": {
                "description": "Initial database size in GB"
            }
        },
        "dbVersion": {
            "type": "string",
            "defaultValue": "13",
            "metadata": {
                "description": "Version of PostgreSQL to install"
            }
        },
        "dbVMSize": {
            "type": "string",
            "defaultValue": "Standard_E16ds_v4",
            "metadata": {
                "description": "PostgreSQL VM Size"
            }
        },
        "dbEdition": {
            "type": "string",
            "defaultValue": "MemoryOptimized",
            "metadata": {
                "description": "PostgreSQL VM compute tier"
            }
        },
        "deployLogAnalytics": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Flag to determine whether to deploy Log Analytics"
            }
        },
        "storageSuffix": {
            "type": "string",
            "defaultValue": "core.windows.net",
            "metadata": {
                "description": "DNS suffix for storage"
            }
        },
        "privateStorageEndpointName": {
            "type": "string",
            "defaultValue": "oms-pe-premiumstorage",
            "metadata": {
                "description": "Name of the private endpoint for the storage"
            }
        },
        "mqsharename": {
            "type": "string",
            "defaultValue": "mqha",
            "metadata": {
                "description": "name of the Azure Premium File Share to create MQ instance"
            }
        },
        "vmNsgSecurityRules": {
            "type": "array",
            "defaultValue": [
                {
                    "name": "SSH",
                    "properties": {
                        "priority": 300,
                        "protocol": "TCP",
                        "access": "Allow",
                        "direction": "Inbound",
                        "sourceAddressPrefix": "*",
                        "sourcePortRange": "*",
                        "destinationAddressPrefix": "*",
                        "destinationPortRange": "22"
                    }
                }
            ]
        },
        "devVmSize": {
            "type": "string",
            "defaultValue": "Standard_B2ms",
            "metadata": {
                "description": "Size of Dev VM"
            }
        },
        "devVmDiskType": {
            "type": "string",
            "defaultValue": "Premium_LRS",
            "allowedValues": [
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_LRS",
                "StandardSSD_LRS",
                "StandardSSD_ZRS",
                "UltraSSD_LRS"
            ],
            "metadata": {
                "description": "OS Disk type for Dev VM"
            }
        },
        "devVmBootstrap": {
            "type": "string",
            "defaultValue": "#cloud-config\n\nruncmd:\n - sudo apt-get update -y \n - sudo apt-get install -y ca-certificates curl gnupg lsb-release\n - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n - echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n - sudo apt-get update -y\n - sudo apt-get -y install docker-ce docker-ce-cli containerd.io\n - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n - chmod 700 get_helm.sh\n - ./get_helm.sh\n - sudo usermod -aG docker $USER\n - mkdir /tmp/OCPInstall\n - [ wget, -nv, \"https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz\", -O, /tmp/OCPInstall/openshift-client-linux.tar.gz ]\n - tar xvf /tmp/OCPInstall/openshift-client-linux.tar.gz -C /tmp/OCPInstall\n - sudo cp /tmp/OCPInstall/oc /usr/bin",
            "metadata": {
                "description": "Bootstrap script for Dev VM"
            }
        },
        "devVmZone": {
            "type": "string",
            "defaultValue": "1",
            "allowedValues": [
                "1", "2", "3"
            ],
            "metadata": {
                "description": "Availability zone for the Dev VM"
            }
        },
        "devVmOSVersion": {
            "type": "string",
            "defaultValue": "18.04-LTS",
            "allowedValues": [
                "18.04-LTS",
                "20.04-LTS"
            ]
        },
        "mqVmSize": {
            "type": "string",
            "defaultValue": "Standard_B2ms",
            "metadata": {
                "description": "MQ VM Size"
            }
        },
        "mqVmDiskType": {
            "type": "string",
            "defaultValue": "Premium_LRS",
            "allowedValues": [
                "Premium_LRS",
                "Premium_ZRS",
                "UltraSSD_LRS"
            ],
            "metadata": {
                "description": "OS Disk type for MQ VM"
            }
        },
        "mqVmOsVersion": {
            "type": "string",
            "defaultValue": "8.2",
            "metadata": {
                "description": "RHEL Version for MQ VM"
            }
        },
        "mqVmZone": {
            "type": "string",
            "defaultValue": "1",
            "allowedValues": [
                "1", "2", "3"
            ],
            "metadata": {
                "description": "Availability zone for MQ VM"
            }
        },
        "mqVmBootstrap": {
            "type": "string",
            "defaultValue": "[concat('#cloud-config\n\nruncmd:\n - sudo yum update\n - sudo yum install -y nfs-utils\n - sudo yum install -y java-1.8.0-openjdk\n - sudo mkdir /MQHA\n - sudo mount -t nfs ',parameters('namePrefix'),'filesprm.privatelink.file.core.windows.net:/',parameters('namePrefix'),'filesprm/',parameters('mqsharename'),' /MQHA -o vers=4,minorversion=1,sec=sys \n - sudo echo \"',parameters('namePrefix'),'filesprm.privatelink.file.core.windows.net:/',parameters('namePrefix'),'filesprm/',parameters('mqsharename'),' /MQHA nfs rw,hard,noatime,nolock,vers=4,tcp,_netdev 0 0\" >> /etc/fstab \n - sudo mkdir -p /MQHA/logs\n - sudo mkdir -p /MQHA/qmgrs\n - sudo groupadd mqclient\n - sudo useradd app\n - sudo wget https://aka.ms/downloadazcopy-v10-linux -O /tmp/azcopy.tar.gz\n - sudo tar -xvf /tmp/azcopy.tar.gz -C /tmp\n - sudo mv /tmp/azcopy_linux* /tmp/azcopy')]",
            "metadata": {
                "description": "Bootstrap script for MQ VM"
            }
        },
                "registrySku": {
            "type": "string",
            "defaultValue": "Premium",
            "allowedValues": [
                "Basic",
                "Classic",
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "Container Registry SKU"
            }
        },
        "acrLoginServer": {
            "type": "string",
            "defaultValue": "azurecr.io",
            "metadata": {
                "description": "Azure Container Registry Suffix"
            }
        }
    },
    "variables": {
        "vnetName": "[concat(parameters('namePrefix'), '-vnet')]",
        "controlSubnetName": "[concat(parameters('namePrefix'), '-control-subnet')]",
        "workerSubnetName": "[concat(parameters('namePrefix'), '-worker-subnet')]",
        "endpointSubnetName": "[concat(parameters('namePrefix'), '-endpoint-subnet')]",
        "dataSubnetName": "[concat(parameters('namePrefix'), '-data-subnet')]",
        "devSubnetName": "[concat(parameters('namePrefix'),'-dev-subnet')]",
        "natSubnetName": "[concat(parameters('namePrefix'), '-nat-subnet')]",
        "gwPublicIPName": "[concat(parameters('namePrefix'), '-gw-public-ip')]",
        "natGwName": "[concat(parameters('namePrefix'), '-nat-gw')]",
        "bastionSubnetName": "AzureBastionSubnet",
        "bastionIPName": "[concat(parameters('namePrefix'), '-bastion-public-ip')]",
        "bastionNSGName": "[concat(parameters('namePrefix'), '-bastion-nsg')]",
        "bastionHostName": "[concat(parameters('namePrefix'), '-bastion-vm')]",
        "dbDNSZoneName": "omspostgres.private.postgres.database.azure.com",
        "postgreSQLName": "[concat(parameters('namePrefix'),'-postgresql')]",
        "dbDiagSettingsName": "[concat(variables('postgreSQLName'),'-diag-settings')]",
        "workspaceName": "[concat(parameters('namePrefix'), '-log-analytics-workspace')]",
        "storageAccountName": "[concat(parameters('namePrefix'), 'filesprm')]",
        "storageDNSZoneName": "[concat('privatelink.file.',parameters('storageSuffix'))]",
        "fileStorageAccountPrivateEndpointGroupName": "file",
        "devVmIpName": "[concat(variables('devVmName'), '-nic')]",
        "devVmNsgName": "[concat(variables('devVmName'), '-nsg')]",
        "devVmName": "[concat(parameters('namePrefix'), '-dev-vm')]",
        "mqVmName": "[concat(parameters('namePrefix'),'-mq-vm')]",
        "mqVmIpName": "[concat(variables('mqVmName'), '-nic')]",
        "mqVmNsgName": "[concat(variables('mqVmName'), '-nsg')]",
        "registryName": "[concat(parameters('namePrefix'), 'registry')]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2022-07-01",
            "name": "[variables('vnetName')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnetCIDR')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('controlSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('controlSubnetCIDR')]",
                            "privateLinkServiceNetworkPolicies": "Disabled"
                        }
                    },
                    {
                        "name": "[variables('workerSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('workerSubnetCIDR')]"
                        }
                    },
                    {
                        "name": "[variables('endpointSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('endpointSubnetCIDR')]",
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.ContainerRegistry"
                                }
                            ],
                            "privateLinkServiceNetworkPolicies": "Enabled",
                            "privateEndpointNetworkPolicies": "Disabled"
                        }
                    },
                    {
                        "name": "[variables('dataSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('dataSubnetCIDR')]",
                            "delegations": [
                                {
                                    "name": "Microsoft.DBPostgresSQL.flexibleServers",
                                    "properties": {
                                        "serviceName": "Microsoft.DBforPostgreSQL/flexibleServers"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "[variables('devSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('devSubnetCIDR')]"
                        }
                    },
                    {
                        "name": "[variables('natSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('natSubnetCIDR')]",
                            "natGateway": {
                                "id": "[resourceId('Microsoft.Network/natGateways', variables('natGwName'))]"
                            }
                        } 
                    },
                    {
                        "name": "[variables('bastionSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('bastionSubnetCIDR')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionNSGName'))]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionNSGName'))]",
                "[resourceId('Microsoft.Network/natGateways', variables('natGwName'))]"
            ]
        },
        /* Below are the NAT gateway resources */
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2022-07-01",
            "name": "[variables('gwPublicIPName')]",
            "location": "[parameters('location')]",
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            }
        },
        {
            "type": "Microsoft.Network/natGateways",
            "apiVersion": "2022-07-01",
            "name": "[variables('natGwName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIpAddresses": [
                    {
                        "id": "[resourceId('Microsoft.Network/publicIpAddresses/', variables('gwPublicIPName'))]"
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('gwPublicIPName'))]"
            ]
        },
        /* Below are the bastion service resources */
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2022-07-01",
            "name": "[variables('bastionIPName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2022-07-01",
            "name": "[variables('bastionNSGName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowHttpsInBound",
                        "properties": {
                            "priority": 120,
                            "protocol": "Tcp",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourceAddressPrefix": "Internet",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "443"                           
                        }
                    },
                    {
                        "name": "AllowGatewayManagerInbound",
                        "properties": {
                            "priority": 130,
                            "protocol": "Tcp",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourceAddressPrefix": "GatewayManager",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "443"    
                        }
                    },
                    {
                        "name": "AllowAzureLoadBalancerInbound",
                        "properties": {
                            "priority": 140,
                            "protocol": "Tcp",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourceAddressPrefix": "AzureLoadBalancer",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "443"    
                        }
                    },
                    {
                        "name": "AllowBastionHostCommunication",
                        "properties": {
                            "priority": 150,
                            "protocol": "*",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "destinationPortRanges": [
                                "8080",
                                "5701"
                            ]    
                        }
                    },
                    {
                        "name": "AllowSshRdpOutbound",
                        "properties": {
                            "priority": 100,
                            "protocol": "*",
                            "access": "Allow",
                            "direction": "Outbound",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "destinationPortRanges": [
                                "22",
                                "3389"
                            ]    
                        }
                    },
                    {
                        "name": "AllowAzureCloudOutbound",
                        "properties": {
                            "priority": 110,
                            "protocol": "Tcp",
                            "access": "Allow",
                            "direction": "Outbound",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "AzureCloud",
                            "destinationPortRange": "443"    
                        }
                    },
                    {
                        "name": "AllowBastionCommunication",
                        "properties": {
                            "priority": 120,
                            "protocol": "*",
                            "access": "Allow",
                            "direction": "Outbound",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "destinationPortRanges": [
                                "8080",
                                "5701"
                            ]    
                        }
                    },
                    {
                        "name": "AllowGetSessionInformation",
                        "properties": {
                            "priority": 130,
                            "protocol": "*",
                            "access": "Allow",
                            "direction": "Outbound",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "Internet",
                            "destinationPortRange": "80"    
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/bastionHosts",
            "apiVersion": "2022-07-01",
            "name": "[variables('bastionHostName')]",
            "location": "[parameters('location')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('bastionSubnetName'))]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionIPName'))]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionIPName'))]"
            ]
        },
        /* Below are the PostgreSQL server resources */
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2020-06-01",
            "name": "[variables('dbDNSZoneName')]",
            "location": "global",
            "properties": {},
            "dependsOn": [
                "[variables('vnetName')]"
            ]
        },
        {
            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
            "apiVersion": "2020-06-01",
            "name": "[concat(variables('dbDNSZoneName'), '/', variables('dbDNSZoneName'), '-link')]",
            "location": "global",
            "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('dbDNSZoneName'))]"
            ]
        },
        {
            "type": "Microsoft.DBforPostgreSQL/flexibleServers",
            "apiVersion": "2021-06-01",
            "name": "[variables('postgreSQLName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('dbVMSize')]",
                "tier": "[parameters('dbEdition')]"
            },
            "properties": {
                "administratorLogin": "[parameters('adminUserName')]",
                "administratorLoginPassword": "[parameters('adminPassword')]",
                "backup": {
                    "backupRetentionDays": "[parameters('backupRetentionDays')]",
                    "geoRedundantBackup": "[parameters('geoRedundantBackup')]"
                },
                "createMode": "Create",
                "highAvailability": {
                    "mode": "ZoneRedundant"
                },
                "network": {
                    "delegatedSubnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('dataSubnetName'))]",
                    "privateDnsZoneArmResourceId": "[resourceId('Microsoft.Network/privateDnsZones', variables('dbDNSZoneName'))]"
                },
                "storage": {
                    "storageSizeGB": "[parameters('dbStorageSizeGB')]"
                },
                "version": "[parameters('dbVersion')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('dbDNSZoneName'), format('{0}-link', variables('dbDNSZoneName')))]"
            ]
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2022-10-01",
            "name": "[variables('workspaceName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                }
            }
        },
        {
            "type": "Microsoft.Insights/diagnosticSettings",
            "apiVersion": "2021-05-01-preview",
            "condition": "[parameters('deployLogAnalytics')]",
            "name": "[variables('dbDiagSettingsName')]",
            "scope": "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('postgreSQLName'))]",
            "properties": {
                "logAnalyticsDestinationType": "AzureDiagnostics",
                "logs": [
                    {
                        "category": "PostgreSQLLogs",
                        "enabled": true
                    }
                ],
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true
                    }
                ],
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces',variables('workspaceName'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('postgreSQLName'))]"
            ]
        },
        /* Below are the storage resources for MQ */
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-06-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "kind": "FileStorage",
            "sku": {
                "name": "Premium_LRS"
            },
            "properties": {
                "allowSharedKeyAccess": true,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "supportsHttpsTrafficOnly": false,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Deny"
                }
            }
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2020-06-01",
            "name": "[variables('storageDNSZoneName')]",
            "location": "global",
            "properties": {},
            "dependsOn": [
                "[variables('vnetName')]"
            ]
        },
        {
            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
            "apiVersion": "2020-06-01",
            "name": "[concat(variables('storageDNSZoneName'),'/',variables('vnetName'),'-link')]",
            "location": "global",
            "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('storageDNSZoneName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2021-03-01",
            "name": "[parameters('privateStorageEndpointName')]",
            "location": "[parameters('location')]",
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('endpointSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                    {
                        "name": "[parameters('privateStorageEndpointName')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]",
                            "groupIds": [
                                "[variables('fileStorageAccountPrivateEndpointGroupName')]"
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2022-07-01",
            "name": "[concat(parameters('privateStorageEndpointName'),'/','dnsgroupname')]",
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "premium",
                        "properties": {
                            "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('storageDNSZoneName'))]"
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints',parameters('privateStorageEndpointName'))]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('storageAccountName'),'/default')]",
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "protocolSettings": {
                    "smb": {
                        "multichannel": {
                            "enabled": false
                        }
                    }
                },
                "shareDeleteRetentionPolicy": {
                    "days": 7,
                    "enabled": true
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('storageAccountName'),'/default/',parameters('mqsharename'))]",
            "properties": {
                "accessTier": "Premium",
                "enabledProtocols": "NFS",
                "metadata": {},
                "rootSquash": "NoRootSquash",
                "shareQuota": 100
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ]
        },
        {
            "type": "Microsoft.Insights/diagnosticSettings",
            "apiVersion": "2021-05-01-preview",
            "condition": "[parameters('deployLogAnalytics')]",
            "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('storageAccountName'))]",
            "name": "[variables('storageAccountName')]",
            "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces',variables('workspaceName'))]",
                "metrics": [
                {
                    "category": "Transaction",
                    "enabled": true
                }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]"
            ]
        },
        {
            "type": "Microsoft.Insights/diagnosticSettings",
            "apiVersion": "2021-05-01-preview",
            "condition": "[parameters('deployLogAnalytics')]",
            "name": "[variables('storageAccountName')]",
            "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', variables('storageAccountName'), variables('storageAccountName'))]",
            "properties": {
                "logAnalyticsDestinationType": "AzureDiagnostics",
                "logs": [
                    {
                        "category": "StorageDelete",
                        "enabled": true
                    },
                    {
                        "category": "StorageRead",
                        "enabled": true
                    },
                    {
                        "category": "StorageWrite",
                        "enabled": true
                    }
                ],
                "metrics": [
                    {
                        "category": "Transaction",
                        "enabled": true
                    }
                ],
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces',variables('workspaceName'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]"
            ]
        },
        /* Below are the Dev VM resources */
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2022-07-01",
            "name": "[variables('devVmIpName')]",
            "location": "[parameters('location')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('devSubnetName'))]"
                            },
                            "privateIPAllocationMethod": "Dynamic"
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('devVmNsgName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('devVmNsgName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2022-07-01",
            "name": "[variables('devVmNsgName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": "[parameters('vmNsgSecurityRules')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2021-03-01",
            "name": "[variables('devVmName')]",
            "location": "[parameters('location')]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('devVmSize')]"
                },
                "storageProfile": {
                    "osDisk": {
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[parameters('devVmDiskType')]"
                        }
                    },
                    "imageReference": {
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "[parameters('devVmOSVersion')]",
                        "version": "latest"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('devVmIpName'))]"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('devVmName')]",
                    "adminUsername": "[parameters('adminUserName')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "customData": "[base64(parameters('devVmBootstrap'))]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": false
                    }
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true
                    }
                }
            },
            "zones": [
                "[parameters('devVmZone')]"
            ],
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('devVmIpName'))]"
            ]
        },
        /* Below are the MQ VM resources*/
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2022-07-01",
            "name": "[variables('mqVmIpName')]",
            "location": "[parameters('location')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('workerSubnetName'))]"
                            },
                            "privateIPAllocationMethod": "Dynamic"
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mqVmNsgName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mqVmNsgName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2022-07-01",
            "name": "[variables('mqVmNsgName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": "[parameters('vmNsgSecurityRules')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2021-03-01",
            "name": "[variables('mqVmName')]",
            "location": "[parameters('location')]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('mqVmSize')]"
                },
                "storageProfile": {
                    "osDisk": {
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[parameters('mqVmDiskType')]"
                        }
                    },
                    "imageReference": {
                        "publisher": "RedHat",
                        "offer": "RHEL",
                        "sku": "[parameters('mqVmOsVersion')]",
                        "version": "latest"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('mqVmIpName'))]"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('mqVmName')]",
                    "adminUsername": "[parameters('adminUserName')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "customData": "[base64(parameters('mqVmBootstrap'))]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": false
                    }
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true
                    }
                }
            },
            "zones": [
                "[parameters('mqVmZone')]"
            ],
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces',variables('mqVmIpName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares',variables('storageAccountName'),'default',parameters('mqsharename'))]",
                "[resourceId('Microsoft.Network/privateEndpoints',parameters('privateStorageEndpointName'))]"
            ]
        },
        /* Below are container registry resources */
                {
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "2021-09-01",
            "name": "[variables('registryName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('registrySku')]"
            },
            "properties": {
                "publicNetworkAccess": "Disabled",
                "zoneRedundancy": "Disabled",
                "adminUserEnabled": true
            }
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2020-06-01",
            "name": "[concat('privatelink.', parameters('acrLoginServer'))]",
            "location": "global",
            "properties": {}
        },
        {
            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
            "apiVersion": "2020-06-01",
            "name": "[concat('privatelink.', parameters('acrLoginServer'), '/', variables('vnetName'), '-link')]",
            "location": "global",
            "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', concat('privatelink.', parameters('acrLoginServer')))]"
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2021-03-01",
            "name": "oms-pe-acr",
            "location": "[parameters('location')]",
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('endpointSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                    {
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', variables('registryName'))]",
                            "groupIds": [
                                "registry"
                            ]
                        },
                        "name": "oms-pe-acr"
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('registryName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2020-06-01",
            "name": "[concat('oms-pe-acr', '/dnsgroupname')]",
            "properties": {
                "privateDnsZoneConfigs": [
                    {
                        "name": "registry",
                        "properties": {
                            "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones',concat('privatelink.', parameters('acrLoginServer')))]"
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', 'oms-pe-acr')]"
            ]
        },
        {
            "type": "Microsoft.Insights/diagnosticSettings",
            "apiVersion": "2021-05-01-preview",
            "condition": "[parameters('deployLogAnalytics')]",
            "name": "[variables('registryName')]",
            "scope": "[resourceId('Microsoft.ContainerRegistry/registries', variables('registryName'))]",
            "properties": {
                "logAnalyticsDestinationType": "AzureDiagnostics",
                "logs": [
                    {
                        "category": "ContainerRegistryRepositoryEvents",
                        "enabled": true
                    },
                    {
                        "category": "ContainerRegistryLoginEvents",
                        "enabled": true
                    }
                ],
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true
                    }
                ],
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces',variables('workspaceName'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('registryName'))]"
            ]
        }
    ]
}